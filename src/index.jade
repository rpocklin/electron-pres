doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title E for Electron
    link(rel='stylesheet', type='text/css', href='build/build.css')

  body
    article
      section
        div(style="display: inline-block")
          img.right(src="images/electron.png" width="300px" style="border-radius: 5px")
        br
        h2(style="font-size: 250%;")
          span(style="color: #aaccaa") E for Electron
        //span.small 0.7.1
        br

      section
        br
        br
        h2 Quick Intro
        li
        li Rob Pocklington
        li Full-stack developer my whole career
        li Java, Ruby, Groovy, Scala, Node + JS
        li Worked at <span style="color: #6699ff">MYOB</span>, <span style="color: #66aaff">Sportsbet</span> and <span style="color: #99ccff">Seek</span>
        li Currently @ <span style="color: #cc6666">NAB</span> in Docklands (Internet Banking)<br/><br/><br/>

      section
        br
        h2(style="color: #ddcc88") Overview
        li(style="height: 10px")
        li <b>News</b>
        li Web pulse check
        li(style="height: 10px")
        li <b>Electron</b>
        li History and Architecture
        li Features + Benefits
        li A Real Example
        li Issues
        li Closing Thoughts
        li
        //(recommendations, crystal ball, start with a remote webserver)

        //li - aurelia, angular 2, nativebase etc. react, react-native, ionic2 (wrapping cordova)
        //li Is web dead / dying?
        //li Existing angular 1.4 app, using bower, not shiny ES6 with webpack.  Ie: probably what you have in production now
        //li Issues Faced
        //li Debugging
        //li Overview / History / Architecture (Atom,
        //li Benefits (more CPU, )
        //li Features (local access, db access, cross-domains, updating, online-offline, service workers / backend)
        //li strangely, you can't access the GPS from the main thread... ?)
        //li Problems (viruses, versioning, updates / feature toggles / 2 phase models / db, test diff platforms)

      section
        li
          h2(style="color: #cc88aa") Web Pulse Check
        li
        li Angular 2 - Google
        li React v15.4.0 - Facebook
        li Aurelia v1.07 - Rob Eisenberg<br/><br/><br/>

      section
        li
          h2(style="color: #cc88aa") Web Pulse Check
        li
        li Ionic v1.3 (Angular 1.5)
        li Nativescript v2.4.0 - Telerik
        li React-Native v0.37.0 - Facebook<br/><br/><br/><br/>

        // RN will support Ubuntu and Windows, and supports Mac OSX

      section
        li
          h2(style="color: #cc88aa") Web Pulse Check (cont ...)
        li
        li Arc welder App v54.5 (Android on Desktop)
        li NW.js v0.18.7
        li Electron v1.4.7<br/><br/><br/>
        // http://arcwelder.proweb.info/

      section
        li
          h2(style="color: #cc88aa") Electron - History
        li(style="font-size: 18px") Invented by Github in 2013 (previously atom-shell)
        li
        li(style="font-size: 22px") Allows developers to create cross-platform desktop apps with web technologies<br/><br/><br/><br/><br/>

      section
        li
          h2(style="color: #cc88aa") Electron - Architecture
        li(style="font-size: 18px") Server-side Node.js + Chromium browser<br/><br/>
        li
          img.right(src="images/arch.png" width="300px" style="border-radius: 5px")
        br
        br

       section
        li
          h2(style="color: #cc88aa") Electron (cont ...)
        li
          h2 Abstracting Too Much?
        li GWT / EXT.js
        li Cordova / Phonegap / Ionic<br/><br/><br/><br/>

        // HISTORY
        // ARCHIRECTURE
        //li Separate render and main thread<br/>(think: service workers++)

        //  h2(style="color: #cc88aa") Electron (cont ...)
        //li
        //li Usually, this stuff fails terribly.
        //li I believe this is not one of those times.
        //li

      section
        li
          h2(style="color: #8888cc") Benefits
        li
        li Multi-platform (Linux + Windows + Mac OSX + ARM)
        li Combine fast native binaries with familiar web code<br/><br/>
        li Frontend framework agnostic (Webpack + ES6 recommended)<br/><br/><br/>

      section
        li
          h2(style="color: #8888cc") Benefits (cont ...)
        li
        li Builds off a stable base (Chromium, Node.js)
        li Users download and install<br/>(just like the old days!)
        li Full Node.js on the client (endless possibilities)<br/>
        li Can leverage any existing Node.js library<br/><br/>

      section
        li
          h2(style="color: #cc99cc") Main Features
        li
        li Superset of browser features<br/>IndexedDB, Local Storage etc.
        li System-level native access (file / database / device)
        li No CORS issues / browser sandboxing<br/><br/><br/>

      section
        li
          h2(style="color: #cc99cc") Main Features (cont ...)
        li
        li Right-click context menu support
        li OS Menubar / Windows / Drag + drop
        li System tray + Taskbar (eg. Slack / Rdio)
        li Auto-updates (or prompted updates)
        li Crash-reporting
        li Flash plugin support (via pepper-plugin)<br/>
        // copy and paste

      section
        h2(style="color: #99cc00") Example<br/><br/><br/><br/><br/><br/>

      section
        h2(style="color: #ccaa33") Testing
        li
        li <span style="color: #8888cc">Mocha</span> / <span style="color: #cc88aa">Jasmine</span> (it's just Node.js)
        li <span style="color: #ddcc88">Spectron</span> for E2E testing<br/><br/><br/><br/>

      section
        h2(style="color: #ccaa33") User Issues
        li
        li Users install from the Internet (safe?)
        li No fine-grained user permissions (eg. file / camera)
        li No brower sandbox, no warranty<br/><br/><b>rm -rf ~</b><br/><br/><br/>

      section
        h2(style="color: #ccaa33") Building Issues
        li
        li Icons, iCONS and icons
        li Code signing (optional but recommended)
        li CI / CD - Travis / Appveyor for Windows
        li Hosting binaries<br/><br/><br/><br/>

      section
        h2(style="color: #ccaa33") Developer Issues
        li
        li Communications between main and render threads<br/>(think: web workers)
        li Supporting updates / multi-versions / data-migrations<br/><br/>
        li Testing builds on multiple platforms
        li Source code security<br/><br/>
        // https://nulab-inc.com/blog/typetalk/3-necessary-things-to-correctly-release-a-product-based-on-the-electron-app/

      section
        h2(style="color: #aa99ff") Closing thoughts<br/>
        li
        li Electron gives a great native experience
        li Within reach for most Node.js developers
        li Growing demand for multi-skilled JS developers<br/><br/>
        li Web or native, component-based designs win
        li ES6 + pure Javascript is the safest bet<br/><br/>

      section
        h2(style="color: #aa99ff") Questions?<br/><br/><br/>

      section
        h2(style="color: #66eeaa") Thanks for listening!<br/><br/>
        li Slides<br/><b>rp.js.org/electron-pres/</b><br/><br/>Twitter<br/><b>@ReactMelb @rpocklin</b>

    script(src='build/build.js')

//nodesource.com/blog/fifteen-essential-packages-to-get-started-with-electron/

// App https://github.com/sindresorhus/awesome-electron#apps
// Boilerplate https://github.com/szwacz/electron-boilerplate
// el-gh https://github.com/electron/electron
// spectron http://electron.atom.io/spectron/

// web vs service workers https://nolanlawson.github.io/cascadia-2016/#/42

//if you are worried about bad npm modules you should use snyk or nsp to detect malicious or
//        vulnerable version of code

//https://blog.liftsecurity.io/2015/01/27/a-malicious-module-on-npm